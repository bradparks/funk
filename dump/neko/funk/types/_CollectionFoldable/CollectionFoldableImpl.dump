private class funk.types._CollectionFoldable.CollectionFoldableImpl{
	static _new(inline method) : collection : funk.extensions.Collection<funk.types.CollectionFoldable.T> -> funk.extensions.Collection<funk.types.CollectionFoldable.T>

	 = function(collection:funk.extensions.Collection<funk.types.CollectionFoldable.T>) = {
		return collection;
	};

	static public foldLeft<T : foldLeft.T>(inline method) : this : funk.extensions.Collection<foldLeft.T> -> value : foldLeft.T -> func : (foldLeft.T -> foldLeft.T -> foldLeft.T) -> funk.extensions.Option<foldLeft.T>

	 = function(this1:funk.extensions.Collection<foldLeft.T>,value:foldLeft.T,func:foldLeft.T -> foldLeft.T -> foldLeft.T) = {
		var result = value;
		var iterator = this1.iterator();
		while ((iterator.hasNext())) result = func(result,iterator.next());
		return funk.extensions._Option.OptionImpl._new(if ((result == null))funk.extensions.Options.None else funk.extensions.Options.Some(result)));
	};

	static public foldRight<T : foldRight.T>(inline method) : this : funk.extensions.Collection<foldRight.T> -> value : foldRight.T -> func : (foldRight.T -> foldRight.T -> foldRight.T) -> funk.extensions.Option<foldRight.T>

	 = function(this1:funk.extensions.Collection<foldRight.T>,value:foldRight.T,func:foldRight.T -> foldRight.T -> foldRight.T) = {
		var result = value;
		var iterator = this1.iterator();
		var reverse = {
			var p = iterator;
			var stack = {
				var stack = [];
				for (i in p) stack.push(i);
				stack;
			};
			stack.reverse();
			stack.iterator();
		};
		while ((reverse.hasNext())) result = func(result,reverse.next());
		return funk.extensions._Option.OptionImpl._new(if ((result == null))funk.extensions.Options.None else funk.extensions.Options.Some(result)));
	};

	static public fromCollection<T : fromCollection.T>(inline method) : collection : funk.extensions.Collection<fromCollection.T> -> funk.types.CollectionFoldable<fromCollection.T>

	 = function(collection:funk.extensions.Collection<fromCollection.T>) = {
		return cast collection;
	};

	static public toString<T : toString.T>(inline method) : collection : funk.extensions.Collections<toString.T> -> String

	 = function(collection:funk.extensions.Collections<toString.T>) = {
		return "CollectionFoldable(" + Std.string(collection) + ")";
	};

}